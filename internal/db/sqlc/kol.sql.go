// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: kol.sql

package sqlcdb

import (
	"context"

	"github.com/google/uuid"
)

const CreateKol = `-- name: CreateKol :one
INSERT INTO kol (id, name, email, description, sex, enable, updated_admin_id)
  VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING
    id, name, email, description, sex, enable, updated_admin_id
`

type CreateKolParams struct {
	ID             uuid.UUID
	Name           string
	Email          string
	Description    string
	Sex            Sex
	Enable         bool
	UpdatedAdminID uuid.UUID
}

type CreateKolRow struct {
	ID             uuid.UUID
	Name           string
	Email          string
	Description    string
	Sex            Sex
	Enable         bool
	UpdatedAdminID uuid.UUID
}

func (q *Queries) CreateKol(ctx context.Context, arg *CreateKolParams) (*CreateKolRow, error) {
	row := q.db.QueryRow(ctx, CreateKol,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Description,
		arg.Sex,
		arg.Enable,
		arg.UpdatedAdminID,
	)
	var i CreateKolRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Description,
		&i.Sex,
		&i.Enable,
		&i.UpdatedAdminID,
	)
	return &i, err
}

const GetKolByEmail = `-- name: GetKolByEmail :one
SELECT
    id, name, email, description, sex, enable, updated_admin_id
FROM
    kol
WHERE
    email = $1
`

type GetKolByEmailRow struct {
	ID             uuid.UUID
	Name           string
	Email          string
	Description    string
	Sex            Sex
	Enable         bool
	UpdatedAdminID uuid.UUID
}

func (q *Queries) GetKolByEmail(ctx context.Context, email string) (*GetKolByEmailRow, error) {
	row := q.db.QueryRow(ctx, GetKolByEmail, email)
	var i GetKolByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Description,
		&i.Sex,
		&i.Enable,
		&i.UpdatedAdminID,
	)
	return &i, err
}

const GetKolByID = `-- name: GetKolByID :one
SELECT
    id, name, email, description, sex, enable, updated_admin_id
FROM
    kol
WHERE
    id = $1
`

type GetKolByIDRow struct {
	ID             uuid.UUID
	Name           string
	Email          string
	Description    string
	Sex            Sex
	Enable         bool
	UpdatedAdminID uuid.UUID
}

func (q *Queries) GetKolByID(ctx context.Context, id uuid.UUID) (*GetKolByIDRow, error) {
	row := q.db.QueryRow(ctx, GetKolByID, id)
	var i GetKolByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Description,
		&i.Sex,
		&i.Enable,
		&i.UpdatedAdminID,
	)
	return &i, err
}

const ListKols = `-- name: ListKols :many
SELECT
    id, name, email, description, sex, enable, updated_admin_id
FROM
    kol
WHERE
    deleted_at IS NULL
ORDER BY
    id DESC
`

type ListKolsRow struct {
	ID             uuid.UUID
	Name           string
	Email          string
	Description    string
	Sex            Sex
	Enable         bool
	UpdatedAdminID uuid.UUID
}

func (q *Queries) ListKols(ctx context.Context) ([]*ListKolsRow, error) {
	rows, err := q.db.Query(ctx, ListKols)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ListKolsRow
	for rows.Next() {
		var i ListKolsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Description,
			&i.Sex,
			&i.Enable,
			&i.UpdatedAdminID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateKol = `-- name: UpdateKol :one
UPDATE kol
SET
    name = $2, email = $3, description = $4, sex = $5, enable = $6, updated_admin_id = $7
WHERE
    id = $1
RETURNING
    id, name, email, description, sex, enable, updated_admin_id
`

type UpdateKolParams struct {
	ID             uuid.UUID
	Name           string
	Email          string
	Description    string
	Sex            Sex
	Enable         bool
	UpdatedAdminID uuid.UUID
}

type UpdateKolRow struct {
	ID             uuid.UUID
	Name           string
	Email          string
	Description    string
	Sex            Sex
	Enable         bool
	UpdatedAdminID uuid.UUID
}

func (q *Queries) UpdateKol(ctx context.Context, arg *UpdateKolParams) (*UpdateKolRow, error) {
	row := q.db.QueryRow(ctx, UpdateKol,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Description,
		arg.Sex,
		arg.Enable,
		arg.UpdatedAdminID,
	)
	var i UpdateKolRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Description,
		&i.Sex,
		&i.Enable,
		&i.UpdatedAdminID,
	)
	return &i, err
}
