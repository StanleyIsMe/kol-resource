// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tag.sql

package sqlcdb

import (
	"context"

	"github.com/google/uuid"
)

const CreateTag = `-- name: CreateTag :one
INSERT INTO tag (id, name, updated_admin_id)
  VALUES ($1, $2, $3)
RETURNING
    id, name, updated_admin_id
`

type CreateTagParams struct {
	ID             uuid.UUID
	Name           string
	UpdatedAdminID uuid.UUID
}

type CreateTagRow struct {
	ID             uuid.UUID
	Name           string
	UpdatedAdminID uuid.UUID
}

func (q *Queries) CreateTag(ctx context.Context, arg *CreateTagParams) (*CreateTagRow, error) {
	row := q.db.QueryRow(ctx, CreateTag, arg.ID, arg.Name, arg.UpdatedAdminID)
	var i CreateTagRow
	err := row.Scan(&i.ID, &i.Name, &i.UpdatedAdminID)
	return &i, err
}

const GetTagByID = `-- name: GetTagByID :one
SELECT
    id, name, updated_admin_id
FROM
    tag
WHERE
    id = $1
`

type GetTagByIDRow struct {
	ID             uuid.UUID
	Name           string
	UpdatedAdminID uuid.UUID
}

func (q *Queries) GetTagByID(ctx context.Context, id uuid.UUID) (*GetTagByIDRow, error) {
	row := q.db.QueryRow(ctx, GetTagByID, id)
	var i GetTagByIDRow
	err := row.Scan(&i.ID, &i.Name, &i.UpdatedAdminID)
	return &i, err
}

const ListTags = `-- name: ListTags :many
SELECT
    id, name, updated_admin_id
FROM
    tag
WHERE
    deleted_at IS NULL
ORDER BY
    id DESC
`

type ListTagsRow struct {
	ID             uuid.UUID
	Name           string
	UpdatedAdminID uuid.UUID
}

func (q *Queries) ListTags(ctx context.Context) ([]*ListTagsRow, error) {
	rows, err := q.db.Query(ctx, ListTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ListTagsRow
	for rows.Next() {
		var i ListTagsRow
		if err := rows.Scan(&i.ID, &i.Name, &i.UpdatedAdminID); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateTag = `-- name: UpdateTag :one
UPDATE tag
SET 
    name = $2, updated_admin_id = $3
WHERE
    id = $1
RETURNING
    id, name, updated_admin_id
`

type UpdateTagParams struct {
	ID             uuid.UUID
	Name           string
	UpdatedAdminID uuid.UUID
}

type UpdateTagRow struct {
	ID             uuid.UUID
	Name           string
	UpdatedAdminID uuid.UUID
}

func (q *Queries) UpdateTag(ctx context.Context, arg *UpdateTagParams) (*UpdateTagRow, error) {
	row := q.db.QueryRow(ctx, UpdateTag, arg.ID, arg.Name, arg.UpdatedAdminID)
	var i UpdateTagRow
	err := row.Scan(&i.ID, &i.Name, &i.UpdatedAdminID)
	return &i, err
}
