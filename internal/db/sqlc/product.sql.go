// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: product.sql

package sqlcdb

import (
	"context"

	"github.com/google/uuid"
)

const CreateProduct = `-- name: CreateProduct :one
INSERT INTO product (id, name, description, updated_admin_id)
  VALUES ($1, $2, $3, $4)
RETURNING
    id, name, description, updated_admin_id
`

type CreateProductParams struct {
	ID             uuid.UUID
	Name           string
	Description    string
	UpdatedAdminID uuid.UUID
}

type CreateProductRow struct {
	ID             uuid.UUID
	Name           string
	Description    string
	UpdatedAdminID uuid.UUID
}

func (q *Queries) CreateProduct(ctx context.Context, arg *CreateProductParams) (*CreateProductRow, error) {
	row := q.db.QueryRow(ctx, CreateProduct,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.UpdatedAdminID,
	)
	var i CreateProductRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.UpdatedAdminID,
	)
	return &i, err
}

const GetProductByID = `-- name: GetProductByID :one
SELECT
    id, name, description, updated_admin_id
FROM
    product
WHERE
    id = $1
`

type GetProductByIDRow struct {
	ID             uuid.UUID
	Name           string
	Description    string
	UpdatedAdminID uuid.UUID
}

func (q *Queries) GetProductByID(ctx context.Context, id uuid.UUID) (*GetProductByIDRow, error) {
	row := q.db.QueryRow(ctx, GetProductByID, id)
	var i GetProductByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.UpdatedAdminID,
	)
	return &i, err
}

const ListProducts = `-- name: ListProducts :many
SELECT
    id, name, description, updated_admin_id
FROM
    product
WHERE
    deleted_at IS NULL
ORDER BY
    id DESC
`

type ListProductsRow struct {
	ID             uuid.UUID
	Name           string
	Description    string
	UpdatedAdminID uuid.UUID
}

func (q *Queries) ListProducts(ctx context.Context) ([]*ListProductsRow, error) {
	rows, err := q.db.Query(ctx, ListProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*ListProductsRow
	for rows.Next() {
		var i ListProductsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.UpdatedAdminID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateProduct = `-- name: UpdateProduct :one
UPDATE product
SET
    name = $2, description = $3, updated_admin_id = $4
WHERE
    id = $1
RETURNING
    id, name, description, updated_admin_id
`

type UpdateProductParams struct {
	ID             uuid.UUID
	Name           string
	Description    string
	UpdatedAdminID uuid.UUID
}

type UpdateProductRow struct {
	ID             uuid.UUID
	Name           string
	Description    string
	UpdatedAdminID uuid.UUID
}

func (q *Queries) UpdateProduct(ctx context.Context, arg *UpdateProductParams) (*UpdateProductRow, error) {
	row := q.db.QueryRow(ctx, UpdateProduct,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.UpdatedAdminID,
	)
	var i UpdateProductRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.UpdatedAdminID,
	)
	return &i, err
}
