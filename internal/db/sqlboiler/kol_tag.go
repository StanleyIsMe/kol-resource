// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// KolTag is an object representing the database table.
type KolTag struct {
	ID             string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	KolID          string    `boil:"kol_id" json:"kol_id" toml:"kol_id" yaml:"kol_id"`
	TagID          string    `boil:"tag_id" json:"tag_id" toml:"tag_id" yaml:"tag_id"`
	UpdatedAdminID string    `boil:"updated_admin_id" json:"updated_admin_id" toml:"updated_admin_id" yaml:"updated_admin_id"`
	CreatedAt      time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt      null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *kolTagR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L kolTagL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var KolTagColumns = struct {
	ID             string
	KolID          string
	TagID          string
	UpdatedAdminID string
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
}{
	ID:             "id",
	KolID:          "kol_id",
	TagID:          "tag_id",
	UpdatedAdminID: "updated_admin_id",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	DeletedAt:      "deleted_at",
}

var KolTagTableColumns = struct {
	ID             string
	KolID          string
	TagID          string
	UpdatedAdminID string
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
}{
	ID:             "kol_tag.id",
	KolID:          "kol_tag.kol_id",
	TagID:          "kol_tag.tag_id",
	UpdatedAdminID: "kol_tag.updated_admin_id",
	CreatedAt:      "kol_tag.created_at",
	UpdatedAt:      "kol_tag.updated_at",
	DeletedAt:      "kol_tag.deleted_at",
}

// Generated where

var KolTagWhere = struct {
	ID             whereHelperstring
	KolID          whereHelperstring
	TagID          whereHelperstring
	UpdatedAdminID whereHelperstring
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
	DeletedAt      whereHelpernull_Time
}{
	ID:             whereHelperstring{field: "\"kol_tag\".\"id\""},
	KolID:          whereHelperstring{field: "\"kol_tag\".\"kol_id\""},
	TagID:          whereHelperstring{field: "\"kol_tag\".\"tag_id\""},
	UpdatedAdminID: whereHelperstring{field: "\"kol_tag\".\"updated_admin_id\""},
	CreatedAt:      whereHelpertime_Time{field: "\"kol_tag\".\"created_at\""},
	UpdatedAt:      whereHelpertime_Time{field: "\"kol_tag\".\"updated_at\""},
	DeletedAt:      whereHelpernull_Time{field: "\"kol_tag\".\"deleted_at\""},
}

// KolTagRels is where relationship names are stored.
var KolTagRels = struct {
}{}

// kolTagR is where relationships are stored.
type kolTagR struct {
}

// NewStruct creates a new relationship struct
func (*kolTagR) NewStruct() *kolTagR {
	return &kolTagR{}
}

// kolTagL is where Load methods for each relationship are stored.
type kolTagL struct{}

var (
	kolTagAllColumns            = []string{"id", "kol_id", "tag_id", "updated_admin_id", "created_at", "updated_at", "deleted_at"}
	kolTagColumnsWithoutDefault = []string{"kol_id", "tag_id", "updated_admin_id"}
	kolTagColumnsWithDefault    = []string{"id", "created_at", "updated_at", "deleted_at"}
	kolTagPrimaryKeyColumns     = []string{"id"}
	kolTagGeneratedColumns      = []string{}
)

type (
	// KolTagSlice is an alias for a slice of pointers to KolTag.
	// This should almost always be used instead of []KolTag.
	KolTagSlice []*KolTag
	// KolTagHook is the signature for custom KolTag hook methods
	KolTagHook func(context.Context, boil.ContextExecutor, *KolTag) error

	kolTagQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	kolTagType                 = reflect.TypeOf(&KolTag{})
	kolTagMapping              = queries.MakeStructMapping(kolTagType)
	kolTagPrimaryKeyMapping, _ = queries.BindMapping(kolTagType, kolTagMapping, kolTagPrimaryKeyColumns)
	kolTagInsertCacheMut       sync.RWMutex
	kolTagInsertCache          = make(map[string]insertCache)
	kolTagUpdateCacheMut       sync.RWMutex
	kolTagUpdateCache          = make(map[string]updateCache)
	kolTagUpsertCacheMut       sync.RWMutex
	kolTagUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var kolTagAfterSelectMu sync.Mutex
var kolTagAfterSelectHooks []KolTagHook

var kolTagBeforeInsertMu sync.Mutex
var kolTagBeforeInsertHooks []KolTagHook
var kolTagAfterInsertMu sync.Mutex
var kolTagAfterInsertHooks []KolTagHook

var kolTagBeforeUpdateMu sync.Mutex
var kolTagBeforeUpdateHooks []KolTagHook
var kolTagAfterUpdateMu sync.Mutex
var kolTagAfterUpdateHooks []KolTagHook

var kolTagBeforeDeleteMu sync.Mutex
var kolTagBeforeDeleteHooks []KolTagHook
var kolTagAfterDeleteMu sync.Mutex
var kolTagAfterDeleteHooks []KolTagHook

var kolTagBeforeUpsertMu sync.Mutex
var kolTagBeforeUpsertHooks []KolTagHook
var kolTagAfterUpsertMu sync.Mutex
var kolTagAfterUpsertHooks []KolTagHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *KolTag) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range kolTagAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *KolTag) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range kolTagBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *KolTag) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range kolTagAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *KolTag) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range kolTagBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *KolTag) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range kolTagAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *KolTag) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range kolTagBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *KolTag) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range kolTagAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *KolTag) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range kolTagBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *KolTag) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range kolTagAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddKolTagHook registers your hook function for all future operations.
func AddKolTagHook(hookPoint boil.HookPoint, kolTagHook KolTagHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		kolTagAfterSelectMu.Lock()
		kolTagAfterSelectHooks = append(kolTagAfterSelectHooks, kolTagHook)
		kolTagAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		kolTagBeforeInsertMu.Lock()
		kolTagBeforeInsertHooks = append(kolTagBeforeInsertHooks, kolTagHook)
		kolTagBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		kolTagAfterInsertMu.Lock()
		kolTagAfterInsertHooks = append(kolTagAfterInsertHooks, kolTagHook)
		kolTagAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		kolTagBeforeUpdateMu.Lock()
		kolTagBeforeUpdateHooks = append(kolTagBeforeUpdateHooks, kolTagHook)
		kolTagBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		kolTagAfterUpdateMu.Lock()
		kolTagAfterUpdateHooks = append(kolTagAfterUpdateHooks, kolTagHook)
		kolTagAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		kolTagBeforeDeleteMu.Lock()
		kolTagBeforeDeleteHooks = append(kolTagBeforeDeleteHooks, kolTagHook)
		kolTagBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		kolTagAfterDeleteMu.Lock()
		kolTagAfterDeleteHooks = append(kolTagAfterDeleteHooks, kolTagHook)
		kolTagAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		kolTagBeforeUpsertMu.Lock()
		kolTagBeforeUpsertHooks = append(kolTagBeforeUpsertHooks, kolTagHook)
		kolTagBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		kolTagAfterUpsertMu.Lock()
		kolTagAfterUpsertHooks = append(kolTagAfterUpsertHooks, kolTagHook)
		kolTagAfterUpsertMu.Unlock()
	}
}

// One returns a single kolTag record from the query.
func (q kolTagQuery) One(ctx context.Context, exec boil.ContextExecutor) (*KolTag, error) {
	o := &KolTag{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to execute a one query for kol_tag")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all KolTag records from the query.
func (q kolTagQuery) All(ctx context.Context, exec boil.ContextExecutor) (KolTagSlice, error) {
	var o []*KolTag

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to KolTag slice")
	}

	if len(kolTagAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all KolTag records in the query.
func (q kolTagQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count kol_tag rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q kolTagQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if kol_tag exists")
	}

	return count > 0, nil
}

// KolTags retrieves all the records using an executor.
func KolTags(mods ...qm.QueryMod) kolTagQuery {
	mods = append(mods, qm.From("\"kol_tag\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"kol_tag\".*"})
	}

	return kolTagQuery{q}
}

// FindKolTag retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindKolTag(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*KolTag, error) {
	kolTagObj := &KolTag{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"kol_tag\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, kolTagObj)
	if err != nil {
		return nil, errors.Wrap(err, "model: unable to select from kol_tag")
	}

	if err = kolTagObj.doAfterSelectHooks(ctx, exec); err != nil {
		return kolTagObj, err
	}

	return kolTagObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *KolTag) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no kol_tag provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(kolTagColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	kolTagInsertCacheMut.RLock()
	cache, cached := kolTagInsertCache[key]
	kolTagInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			kolTagAllColumns,
			kolTagColumnsWithDefault,
			kolTagColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(kolTagType, kolTagMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(kolTagType, kolTagMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"kol_tag\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"kol_tag\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into kol_tag")
	}

	if !cached {
		kolTagInsertCacheMut.Lock()
		kolTagInsertCache[key] = cache
		kolTagInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the KolTag.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *KolTag) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	kolTagUpdateCacheMut.RLock()
	cache, cached := kolTagUpdateCache[key]
	kolTagUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			kolTagAllColumns,
			kolTagPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update kol_tag, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"kol_tag\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, kolTagPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(kolTagType, kolTagMapping, append(wl, kolTagPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update kol_tag row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for kol_tag")
	}

	if !cached {
		kolTagUpdateCacheMut.Lock()
		kolTagUpdateCache[key] = cache
		kolTagUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q kolTagQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for kol_tag")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for kol_tag")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o KolTagSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), kolTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"kol_tag\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, kolTagPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in kolTag slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all kolTag")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *KolTag) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no kol_tag provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(kolTagColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	kolTagUpsertCacheMut.RLock()
	cache, cached := kolTagUpsertCache[key]
	kolTagUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			kolTagAllColumns,
			kolTagColumnsWithDefault,
			kolTagColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			kolTagAllColumns,
			kolTagPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert kol_tag, could not build update column list")
		}

		ret := strmangle.SetComplement(kolTagAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(kolTagPrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert kol_tag, could not build conflict column list")
			}

			conflict = make([]string, len(kolTagPrimaryKeyColumns))
			copy(conflict, kolTagPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"kol_tag\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(kolTagType, kolTagMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(kolTagType, kolTagMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert kol_tag")
	}

	if !cached {
		kolTagUpsertCacheMut.Lock()
		kolTagUpsertCache[key] = cache
		kolTagUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single KolTag record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *KolTag) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no KolTag provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), kolTagPrimaryKeyMapping)
	sql := "DELETE FROM \"kol_tag\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from kol_tag")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for kol_tag")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q kolTagQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no kolTagQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from kol_tag")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for kol_tag")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o KolTagSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(kolTagBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), kolTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"kol_tag\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, kolTagPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from kolTag slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for kol_tag")
	}

	if len(kolTagAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *KolTag) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindKolTag(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *KolTagSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := KolTagSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), kolTagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"kol_tag\".* FROM \"kol_tag\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, kolTagPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in KolTagSlice")
	}

	*o = slice

	return nil
}

// KolTagExists checks if the KolTag row exists.
func KolTagExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"kol_tag\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if kol_tag exists")
	}

	return exists, nil
}

// Exists checks if the KolTag row exists.
func (o *KolTag) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return KolTagExists(ctx, exec, o.ID)
}
