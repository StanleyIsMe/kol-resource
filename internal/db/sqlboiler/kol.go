// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Kol is an object representing the database table.
type Kol struct {
	ID             string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name           string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Email          string    `boil:"email" json:"email" toml:"email" yaml:"email"`
	Description    string    `boil:"description" json:"description" toml:"description" yaml:"description"`
	Sex            Sex       `boil:"sex" json:"sex" toml:"sex" yaml:"sex"`
	Enable         bool      `boil:"enable" json:"enable" toml:"enable" yaml:"enable"`
	UpdatedAdminID string    `boil:"updated_admin_id" json:"updated_admin_id" toml:"updated_admin_id" yaml:"updated_admin_id"`
	CreatedAt      time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt      null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	SocialMedia    string    `boil:"social_media" json:"social_media" toml:"social_media" yaml:"social_media"`

	R *kolR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L kolL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var KolColumns = struct {
	ID             string
	Name           string
	Email          string
	Description    string
	Sex            string
	Enable         string
	UpdatedAdminID string
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
	SocialMedia    string
}{
	ID:             "id",
	Name:           "name",
	Email:          "email",
	Description:    "description",
	Sex:            "sex",
	Enable:         "enable",
	UpdatedAdminID: "updated_admin_id",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	DeletedAt:      "deleted_at",
	SocialMedia:    "social_media",
}

var KolTableColumns = struct {
	ID             string
	Name           string
	Email          string
	Description    string
	Sex            string
	Enable         string
	UpdatedAdminID string
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
	SocialMedia    string
}{
	ID:             "kol.id",
	Name:           "kol.name",
	Email:          "kol.email",
	Description:    "kol.description",
	Sex:            "kol.sex",
	Enable:         "kol.enable",
	UpdatedAdminID: "kol.updated_admin_id",
	CreatedAt:      "kol.created_at",
	UpdatedAt:      "kol.updated_at",
	DeletedAt:      "kol.deleted_at",
	SocialMedia:    "kol.social_media",
}

// Generated where

type whereHelperSex struct{ field string }

func (w whereHelperSex) EQ(x Sex) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperSex) NEQ(x Sex) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperSex) LT(x Sex) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperSex) LTE(x Sex) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperSex) GT(x Sex) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperSex) GTE(x Sex) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperSex) IN(slice []Sex) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperSex) NIN(slice []Sex) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var KolWhere = struct {
	ID             whereHelperstring
	Name           whereHelperstring
	Email          whereHelperstring
	Description    whereHelperstring
	Sex            whereHelperSex
	Enable         whereHelperbool
	UpdatedAdminID whereHelperstring
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
	DeletedAt      whereHelpernull_Time
	SocialMedia    whereHelperstring
}{
	ID:             whereHelperstring{field: "\"kol\".\"id\""},
	Name:           whereHelperstring{field: "\"kol\".\"name\""},
	Email:          whereHelperstring{field: "\"kol\".\"email\""},
	Description:    whereHelperstring{field: "\"kol\".\"description\""},
	Sex:            whereHelperSex{field: "\"kol\".\"sex\""},
	Enable:         whereHelperbool{field: "\"kol\".\"enable\""},
	UpdatedAdminID: whereHelperstring{field: "\"kol\".\"updated_admin_id\""},
	CreatedAt:      whereHelpertime_Time{field: "\"kol\".\"created_at\""},
	UpdatedAt:      whereHelpertime_Time{field: "\"kol\".\"updated_at\""},
	DeletedAt:      whereHelpernull_Time{field: "\"kol\".\"deleted_at\""},
	SocialMedia:    whereHelperstring{field: "\"kol\".\"social_media\""},
}

// KolRels is where relationship names are stored.
var KolRels = struct {
}{}

// kolR is where relationships are stored.
type kolR struct {
}

// NewStruct creates a new relationship struct
func (*kolR) NewStruct() *kolR {
	return &kolR{}
}

// kolL is where Load methods for each relationship are stored.
type kolL struct{}

var (
	kolAllColumns            = []string{"id", "name", "email", "description", "sex", "enable", "updated_admin_id", "created_at", "updated_at", "deleted_at", "social_media"}
	kolColumnsWithoutDefault = []string{"name", "email", "description", "sex", "enable", "updated_admin_id"}
	kolColumnsWithDefault    = []string{"id", "created_at", "updated_at", "deleted_at", "social_media"}
	kolPrimaryKeyColumns     = []string{"id"}
	kolGeneratedColumns      = []string{}
)

type (
	// KolSlice is an alias for a slice of pointers to Kol.
	// This should almost always be used instead of []Kol.
	KolSlice []*Kol
	// KolHook is the signature for custom Kol hook methods
	KolHook func(context.Context, boil.ContextExecutor, *Kol) error

	kolQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	kolType                 = reflect.TypeOf(&Kol{})
	kolMapping              = queries.MakeStructMapping(kolType)
	kolPrimaryKeyMapping, _ = queries.BindMapping(kolType, kolMapping, kolPrimaryKeyColumns)
	kolInsertCacheMut       sync.RWMutex
	kolInsertCache          = make(map[string]insertCache)
	kolUpdateCacheMut       sync.RWMutex
	kolUpdateCache          = make(map[string]updateCache)
	kolUpsertCacheMut       sync.RWMutex
	kolUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var kolAfterSelectMu sync.Mutex
var kolAfterSelectHooks []KolHook

var kolBeforeInsertMu sync.Mutex
var kolBeforeInsertHooks []KolHook
var kolAfterInsertMu sync.Mutex
var kolAfterInsertHooks []KolHook

var kolBeforeUpdateMu sync.Mutex
var kolBeforeUpdateHooks []KolHook
var kolAfterUpdateMu sync.Mutex
var kolAfterUpdateHooks []KolHook

var kolBeforeDeleteMu sync.Mutex
var kolBeforeDeleteHooks []KolHook
var kolAfterDeleteMu sync.Mutex
var kolAfterDeleteHooks []KolHook

var kolBeforeUpsertMu sync.Mutex
var kolBeforeUpsertHooks []KolHook
var kolAfterUpsertMu sync.Mutex
var kolAfterUpsertHooks []KolHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Kol) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range kolAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Kol) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range kolBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Kol) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range kolAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Kol) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range kolBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Kol) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range kolAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Kol) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range kolBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Kol) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range kolAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Kol) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range kolBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Kol) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range kolAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddKolHook registers your hook function for all future operations.
func AddKolHook(hookPoint boil.HookPoint, kolHook KolHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		kolAfterSelectMu.Lock()
		kolAfterSelectHooks = append(kolAfterSelectHooks, kolHook)
		kolAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		kolBeforeInsertMu.Lock()
		kolBeforeInsertHooks = append(kolBeforeInsertHooks, kolHook)
		kolBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		kolAfterInsertMu.Lock()
		kolAfterInsertHooks = append(kolAfterInsertHooks, kolHook)
		kolAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		kolBeforeUpdateMu.Lock()
		kolBeforeUpdateHooks = append(kolBeforeUpdateHooks, kolHook)
		kolBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		kolAfterUpdateMu.Lock()
		kolAfterUpdateHooks = append(kolAfterUpdateHooks, kolHook)
		kolAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		kolBeforeDeleteMu.Lock()
		kolBeforeDeleteHooks = append(kolBeforeDeleteHooks, kolHook)
		kolBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		kolAfterDeleteMu.Lock()
		kolAfterDeleteHooks = append(kolAfterDeleteHooks, kolHook)
		kolAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		kolBeforeUpsertMu.Lock()
		kolBeforeUpsertHooks = append(kolBeforeUpsertHooks, kolHook)
		kolBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		kolAfterUpsertMu.Lock()
		kolAfterUpsertHooks = append(kolAfterUpsertHooks, kolHook)
		kolAfterUpsertMu.Unlock()
	}
}

// One returns a single kol record from the query.
func (q kolQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Kol, error) {
	o := &Kol{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to execute a one query for kol")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Kol records from the query.
func (q kolQuery) All(ctx context.Context, exec boil.ContextExecutor) (KolSlice, error) {
	var o []*Kol

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to Kol slice")
	}

	if len(kolAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Kol records in the query.
func (q kolQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count kol rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q kolQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if kol exists")
	}

	return count > 0, nil
}

// Kols retrieves all the records using an executor.
func Kols(mods ...qm.QueryMod) kolQuery {
	mods = append(mods, qm.From("\"kol\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"kol\".*"})
	}

	return kolQuery{q}
}

// FindKol retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindKol(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Kol, error) {
	kolObj := &Kol{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"kol\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, kolObj)
	if err != nil {
		return nil, errors.Wrap(err, "model: unable to select from kol")
	}

	if err = kolObj.doAfterSelectHooks(ctx, exec); err != nil {
		return kolObj, err
	}

	return kolObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Kol) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no kol provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(kolColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	kolInsertCacheMut.RLock()
	cache, cached := kolInsertCache[key]
	kolInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			kolAllColumns,
			kolColumnsWithDefault,
			kolColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(kolType, kolMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(kolType, kolMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"kol\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"kol\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into kol")
	}

	if !cached {
		kolInsertCacheMut.Lock()
		kolInsertCache[key] = cache
		kolInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Kol.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Kol) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	kolUpdateCacheMut.RLock()
	cache, cached := kolUpdateCache[key]
	kolUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			kolAllColumns,
			kolPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update kol, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"kol\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, kolPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(kolType, kolMapping, append(wl, kolPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update kol row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for kol")
	}

	if !cached {
		kolUpdateCacheMut.Lock()
		kolUpdateCache[key] = cache
		kolUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q kolQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for kol")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for kol")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o KolSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), kolPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"kol\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, kolPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in kol slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all kol")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Kol) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("model: no kol provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(kolColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	kolUpsertCacheMut.RLock()
	cache, cached := kolUpsertCache[key]
	kolUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			kolAllColumns,
			kolColumnsWithDefault,
			kolColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			kolAllColumns,
			kolPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert kol, could not build update column list")
		}

		ret := strmangle.SetComplement(kolAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(kolPrimaryKeyColumns) == 0 {
				return errors.New("model: unable to upsert kol, could not build conflict column list")
			}

			conflict = make([]string, len(kolPrimaryKeyColumns))
			copy(conflict, kolPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"kol\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(kolType, kolMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(kolType, kolMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert kol")
	}

	if !cached {
		kolUpsertCacheMut.Lock()
		kolUpsertCache[key] = cache
		kolUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Kol record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Kol) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no Kol provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), kolPrimaryKeyMapping)
	sql := "DELETE FROM \"kol\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from kol")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for kol")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q kolQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no kolQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from kol")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for kol")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o KolSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(kolBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), kolPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"kol\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, kolPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from kol slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for kol")
	}

	if len(kolAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Kol) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindKol(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *KolSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := KolSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), kolPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"kol\".* FROM \"kol\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, kolPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in KolSlice")
	}

	*o = slice

	return nil
}

// KolExists checks if the Kol row exists.
func KolExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"kol\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if kol exists")
	}

	return exists, nil
}

// Exists checks if the Kol row exists.
func (o *Kol) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return KolExists(ctx, exec, o.ID)
}
